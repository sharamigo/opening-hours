import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
	
	
	// this is done for colored pretty print in console
	// in order to get used of it, please install eclipse-plugin (ansi-econsole) more about see following urls:
	// http://mihai-nita.net/2013/06/03/eclipse-plugin-ansi-in-console/
	// https://github.com/mihnita/ansi-econsole
	public static final String ANSI_RESET = "\u001B[0m";
	public static final String ANSI_BLACK = "\u001B[30m";
	public static final String ANSI_RED = "\u001B[31m";
	public static final String ANSI_GREEN = "\u001B[32m";
	public static final String ANSI_YELLOW = "\u001B[33m";
	public static final String ANSI_BLUE = "\u001B[34m";
	public static final String ANSI_PURPLE = "\u001B[35m";
	public static final String ANSI_CYAN = "\u001B[36m";
	public static final String ANSI_WHITE = "\u001B[37m";
	
	private static String[] weekdays = {"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"};
	

	public static void main(String[] args) throws Exception 
	{
				
		// init data
		HashMap<String,Openings> dataItems = Initializer.initializeData();
		
		// start
		System.out.println("Bitte geben Sie den Namen des Objekts ein, von dem Sie die Öffnungszeiten sehen möchten.");
		System.out.println("Zur Auswahl stehen die folgenden Objekte: \n");
		
		// show all key-entries of HashMap generated by Initializer
		for (String key : dataItems.keySet()) {
			System.out.print(key + "  ");
		}
		System.out.print("\n");
		
		Scanner scn = new Scanner(System.in);
		String objName = scn.nextLine();
		
		// check if input is Key of HashMap
		if (dataItems.containsKey(objName)) {
			
			//get details of searched object
			Openings openingdetails = dataItems.get(objName);
			showDetails(openingdetails);
			
		} else {
			System.err.println("Das eingegebene Objekt existiert leider nicht in der Datensammlung");
		}
		
		scn.close();		
		

	}
	
	
	private static void showDetails(Openings opendetails)
	{
		
		// get current time of day
		LocalTime currentTime = LocalTime.now();
		
		// get current weekday
		Calendar ca = Calendar.getInstance();
		int dayofweek = ca.get(Calendar.DAY_OF_WEEK) - 1;
		
		String openingsList = opendetails.printFormattedOpenings(dayofweek);
		String opensNext = opendetails.getNextOpeningTime(currentTime, dayofweek);
		
		// 0) give current time and day of week
		System.out.println("Heute ist " + weekdays [dayofweek] + ", " + currentTime.format(DateTimeFormatter.ofPattern("HH:mm")) + " Uhr");
		
		
		// 1) show current status of item (open/closed)
		if (opendetails.isOpen(currentTime, dayofweek) == true) {
			System.out.println(ANSI_GREEN + "geöffnet" + ANSI_RESET);
		} else {
			System.out.println(ANSI_RED + "geschlossen" + ANSI_RESET);
		}
		
		// 2) information about a soon change of current status (closes...)
		// calc time-diff between now and an endtime
		LocalTime closingTime = opendetails.getClosingTime(dayofweek);
		if (closingTime != null) {
			long diffMinutes = Duration.between(LocalTime.now(), closingTime).toMinutes();
			//System.out.println(diffMinutes);
			if (diffMinutes <= 60 ) {
				System.out.println("schließt um " + closingTime + " Uhr");
			}
		}
        
		
		// 3) if closed, get the next opening-time
        if (opendetails.isOpen(currentTime, dayofweek) == false) {
        	System.out.println(opensNext);
        }
        
		
		// 4) show all opening times of object
        System.out.println(openingsList);      
		
	}	
	

}
